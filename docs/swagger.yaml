openapi: 3.0.0
info:
  title: To-do List API
  version: 1.0.0
  description: |
    API for managing a to-do list with user authentication.
    This API allows users to create, read, update, and delete tasks.
    Users can sign up and log in for authenticated access to their tasks.
    Admin users have additional privileges for user management.

servers:
  - url: http://localhost:3000
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - name
        - email

    Task:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        status:
          type: string
          enum: [pending, in-progress, completed]
        details:
          type: string
        userId:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - name

    LoginRequest:
      type: object
      properties:
        name:
          type: string
          description: Required for admin login
        email:
          type: string
          description: Required for user login
        password:
          type: string
      required:
        - password

    SignupRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
      required:
        - name
        - email
        - password

    TaskRequest:
      type: object
      properties:
        name:
          type: string
        status:
          type: string
          enum: [pending, in-progress, completed]
        details:
          type: string
      required:
        - name

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User or Admin login
      description: |
        Login as either a regular user (with email/password) or admin (with name/password).
        Admin credentials are configured via environment variables.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              userLogin:
                summary: User login
                value:
                  email: "user@example.com"
                  password: "userpassword"
              adminLogin:
                summary: Admin login
                value:
                  name: "admin"
                  password: "adminpassword"
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
        '400':
          description: Email and password are required
        '401':
          description: Invalid password
        '404':
          description: User not found
        '500':
          description: Failed to login

  /users/signup:
    post:
      tags:
        - Users
      summary: User registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      name:
                        type: string
                      email:
                        type: string
        '400':
          description: Bad request - missing required fields
        '409':
          description: User with this email already exists
        '500':
          description: Failed to create user

  /users/profile:
    put:
      tags:
        - Users
      summary: Update authenticated user's profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Email already in use
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Failed to update user

  /users:
    get:
      tags:
        - Users
      summary: Get all users (Admin only)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Admin access required
        '500':
          description: Failed to retrieve users

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Admin access required
        '404':
          description: User not found
        '500':
          description: Failed to retrieve user

    delete:
      tags:
        - Users
      summary: Delete user by ID (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
        '403':
          description: Admin access required
        '404':
          description: User not found
        '500':
          description: Failed to delete user

  /tasks:
    get:
      tags:
        - Tasks
      summary: Get all tasks for authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of user's tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Failed to retrieve tasks

    post:
      tags:
        - Tasks
      summary: Create task for authenticated user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Failed to create task

  /tasks/{id}:
    put:
      tags:
        - Tasks
      summary: Update task by ID (ownership verified)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Task ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                status:
                  type: string
                  enum: [pending, in-progress, completed]
                details:
                  type: string
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized
        '404':
          description: Task not found or access denied
        '500':
          description: Failed to update task

    delete:
      tags:
        - Tasks
      summary: Delete task by ID (ownership verified)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Task ID
      responses:
        '200':
          description: Task deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
        '404':
          description: Task not found or access denied
        '500':
          description: Failed to delete task